<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Ghost in the JVM]]></title>
  <link href="http://dmly.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://dmly.github.com/"/>
  <updated>2012-08-11T14:20:49-07:00</updated>
  <id>http://dmly.github.com/</id>
  <author>
    <name><![CDATA[Doug Ly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Database Full Text Index with Lucene]]></title>
    <link href="http://dmly.github.com/blog/2010/09/14/building-database-full-text-index-with-lucene/"/>
    <updated>2010-09-14T14:15:00-07:00</updated>
    <id>http://dmly.github.com/blog/2010/09/14/building-database-full-text-index-with-lucene</id>
    <content type="html"><![CDATA[<p>I have this client table in Oracle having more than 3 million rows. One of the column is the client name in which our users want to have full text search support.
Originally, Oracle context search feature was choosen by a group of consultants. May be we were maintaining the domain index correctly but its performance sucks.</p>

<!-- more -->


<p>I spend most of my time troubleshooting this issue and found out that we need to run "optimize" to make the index perform well. But anyway I am tired of having to hear users' complaints
everyday so I got rid of Oracle full text search and refactor the search service to use Apache Lucene.</p>

<p>Here is how is done:</p>

<ol>
<li>Connect to the client table and get the rows need to be indexed. Of course I did this in batch of 20K rows each.
You could gain significant performance of this data loading using a database connection pool and pulling data in parallel.</li>
<li>Use Lucene to index the client name and store the client IDs for DB retrieval later on</li>
</ol>


<p>``` groovy Extracting Data for Indexing
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import groovy.sql.Sql;
import com.mchange.v2.c3p0.ComboPooledDataSource;
import java.util.concurrent.*</p>

<p>ComboPooledDataSource ds = new ComboPooledDataSource()
ds.driverClass = 'oracle.jdbc.driver.OracleDriver'
ds.jdbcUrl = ''
ds.user = ''
ds.password = ''
ds.minPoolSize = 2
ds.maxPoolSize = 4
ds.acquireIncrement = 1</p>

<p>def stepCount = 20000
BlockingQueue queue = new ArrayBlockingQueue(8);
def pool = Executors.newFixedThreadPool(3);
def ecs = new ExecutorCompletionService(pool);
def submit = { c -> ecs.submit(c as Callable) }</p>

<p>def sql = """
select
id, name
from
(
select /<em>+ FIRST_ROW(${stepCount}) </em>/
id, name, rownum rnum
from
atlas_client
where
id > 0
and rownum &lt;= ?
order by
id asc
)
where
rnum > ?
"""</p>

<p>def maxCount = new Sql(ds).firstRow('select count(1) as maxCount from atlas_client where id > 0'').maxCount;
println "Max count: ${maxCount}"
def range = (0..maxCount).step(stepCount)
if (range[-1] &lt; maxCount) range &lt;&lt; maxCount</p>

<p>def indexDir = new File('atlas_client_index');
IndexWriter writer = new IndexWriter(indexDir, new StandardAnalyzer(), true);
writer.setUseCompoundFile(false);</p>

<p>def query = {low, hi ->
  println "Querying from ${low} to ${hi}"
  def rows = []
  new Sql(ds).eachRow(sql, [hi, low]) {</p>

<pre><code>row -&gt; rows &lt;&lt; row.toRowResult()
</code></pre>

<p>  }
  println "Finishing query. Return ${rows.size()} rows from ${low} to ${hi}"
  return rows;
}</p>

<p>def createIndex = {array ->
  array.each {</p>

<pre><code>Document doc = new Document();
doc.add(new Field("id", it.id.toString(), Field.Store.YES, Field.Index.NO));
doc.add(new Field("name", it.name, Field.Store.YES, Field.Index.ANALYZED));
writer.addDocument(doc);
</code></pre>

<p>  }
}</p>

<p>for (int i = 0; i &lt; range.size() - 1; i++)
{
  println "Submitting query for clients record from ${range[i]} to ${range[i+1]}"
  def low = range[i]
  def hi = range[i+1]
  submit { query(low, hi) };
}</p>

<p>for (int i = 0; i &lt; range.size() - 1; i++)
{
  def results = ecs.take().get();
  println "Results (${results.size()}) ready for clients record query, indexing..."
  createIndex(results);
  println "Indexing done."
  writer.commit();
}</p>

<p>writer.close();
pool.shutdown();
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asynchronous Calls in C#]]></title>
    <link href="http://dmly.github.com/blog/2010/08/27/asynchronous-calls-in-c-number/"/>
    <updated>2010-08-27T14:19:00-07:00</updated>
    <id>http://dmly.github.com/blog/2010/08/27/asynchronous-calls-in-c-number</id>
    <content type="html"><![CDATA[<p>Last December I started leading a team develop a Outlook addin for the firm.
I admit that I am no C# developer. The last time I used C# was when I attended college years ago. But the group of consultants
were let go and we have to jump in and take ownership of the project.</p>

<p>I also have to admit that C# has a lot of language features that I really wish Java does too. Among them is the concept of delegate
and function pointer used for asynchronous method calls. I know I can get the same thing with Groovy or Scala.</p>

<!-- more -->


<p>This is how I implement a asynchronous call in C#. The DoAsyncHelper class is an example of extension method, akin to Groovy's category concept.</p>

<p>``` csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Diagnostics;</p>

<p>namespace AsyncIterator
{
   class Program
   {</p>

<pre><code>   static void Main(string[] args)
   {
       Console.Out.WriteLine("Calling a very slow method...");
       Console.Out.WriteLine("Press Enter to Cancel.");
       Console.Out.WriteLine("Current thread ID {0}", Thread.CurrentThread.GetHashCode());

       int init = 4;

       verySlowMethod.DoAsync(22, resultReady);

       Console.ReadLine();
   }

   public static void resultReady(int result)
   {
       Console.Out.WriteLine("Current thread ID {0} when result ready", Thread.CurrentThread.GetHashCode());
       Console.WriteLine("Result : {0}",  result);
   }

   public static Func&lt;double, int&gt; verySlowMethod = (double n) =&gt;
   {
       Console.Out.WriteLine("Current thread ID {0} in verySlowMethod", Thread.CurrentThread.GetHashCode());
       Thread.Sleep(5000);
       return (int) n *  (int) n;
   };
</code></pre>

<p>   }</p>

<p>   static class DoAsyncHelper
   {</p>

<pre><code>   public static void DoAsync&lt;T, V&gt;(this Func&lt;T, V&gt; f, T arg, Action&lt;V&gt; callback)
   {
       f.BeginInvoke(arg, result =&gt;
           {
               callback(f.EndInvoke(result));
           }, null);
   }
</code></pre>

<p>   }</p>

<p> }
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrent AMF Request for BlazeDS]]></title>
    <link href="http://dmly.github.com/blog/2009/07/15/concurrent-amf-request-for-blazeds/"/>
    <updated>2009-07-15T14:12:00-07:00</updated>
    <id>http://dmly.github.com/blog/2009/07/15/concurrent-amf-request-for-blazeds</id>
    <content type="html"><![CDATA[<p>Requirement: AMF data service comes with BlazeDS servlet is asynchronous. One of the services provided is RemoteObject. RemoteObject calls are faster than WebServices and HTTPServices because the information is exchanged in binary.
But RemoteObject itself has a not-too-well-known behavior. While it is true that RemoteObject services are asynchronous, they are not parallel.</p>

<!-- more -->


<p>Example: If you make 3 RemoteObject request simultaneously and let assume the 1st request takes 2 seconds, the 2nd requests takes 10, the 3rd takes 30 seconds. You result will come back in 42 seconds. In other word, you get the result when they ALL complete.
This is because AMF gateway takes all the request and queues them up. It processes each in turn and when all have been run, returns back the results. This is not a bug.
Most of the time, it is fine. In our application the issue shows its limitation. The app uses client-side caching to improve performance except for memos-related service.
We also fire multiple requests at the same time, which includes the cached services as well as the memos-related services. Memo-related services would take a few seconds to run.
This in turn defeats the purpose of cached services since all the service requests need to be processed sequentially.</p>

<p>Solution:
We define a separate http channel for the memos-related services to use. Other cached services use a different channel.</p>

<p>``` xml service-config.xml
<channel-definition id="my-amf" class="mx.messaging.channels.AMFChannel">
  <endpoint url="http://{server.name}:{server.port}/{context.root}/messagebroker/amf" class="flex.messaging.endpoints.AMFEndpoint"/>
  <properties></p>

<pre><code>&lt;add-no-cache-headers&gt;false&lt;/add-no-cache-headers&gt;
</code></pre>

<p>  </properties>          <br/>
</channel-definition></p>

<p><channel-definition id="my-secure-amf" class="mx.messaging.channels.SecureAMFChannel">
  <endpoint url="https://{server.name}:{server.port}/{context.root}/messagebroker/amfsecure" class="flex.messaging.endpoints.AMFEndpoint"/>
  <properties></p>

<pre><code>&lt;add-no-cache-headers&gt;false&lt;/add-no-cache-headers&gt;
</code></pre>

<p>  </properties>
</channel-definition></p>

<p><channel-definition id="my-amf2" class="mx.messaging.channels.AMFChannel">
  <endpoint url="http://{server.name}:{server.port}/{context.root}/messagebroker/amf2" class="flex.messaging.endpoints.AMFEndpoint"/>
  <properties></p>

<pre><code>&lt;add-no-cache-headers&gt;false&lt;/add-no-cache-headers&gt;
</code></pre>

<p>  </properties>          <br/>
</channel-definition></p>

<p><channel-definition id="my-secure-amf2" class="mx.messaging.channels.SecureAMFChannel">
  <endpoint url="https://{server.name}:{server.port}/{context.root}/messagebroker/amfsecure2" class="flex.messaging.endpoints.AMFEndpoint"/>
  <properties></p>

<pre><code>&lt;add-no-cache-headers&gt;false&lt;/add-no-cache-headers&gt;
</code></pre>

<p>  </properties>
</channel-definition>
```</p>

<p>``` xml remoting-config.xml
<destination id="coverageService">
  <properties></p>

<pre><code>&lt;factory&gt;spring&lt;/factory&gt;
&lt;source&gt;coverageService&lt;/source&gt;
</code></pre>

<p>  </properties>
  <channels></p>

<pre><code>&lt;channel ref="my-secure-amf" /&gt;
&lt;channel ref="my-amf" /&gt;
</code></pre>

<p>  </channels>
</destination></p>

<p><destination id="activityService">
  <properties></p>

<pre><code>&lt;factory&gt;spring&lt;/factory&gt;
&lt;source&gt;memosService&lt;/source&gt;
</code></pre>

<p>  </properties>
  <channels></p>

<pre><code>&lt;channel ref="my-secure-amf2" /&gt;
&lt;channel ref="my-amf2" /&gt;
</code></pre>

<p>  </channels>
</destination>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Query Templating for Hibernate Native Query]]></title>
    <link href="http://dmly.github.com/blog/2009/07/02/query-templating-for-hibernate-native-query/"/>
    <updated>2009-07-02T14:09:00-07:00</updated>
    <id>http://dmly.github.com/blog/2009/07/02/query-templating-for-hibernate-native-query</id>
    <content type="html"><![CDATA[<p>I recently encounter this kind of problematic requirement: making a native SQL in hibernate dynamic. The query should be written as a template. And based on the user selection, a concrete SQl statement is derived.
It's pointless to have this conversation if we use HQL's query criteria of course. But with native SQL code, I admit there is no easy/legitimate way around but hack.</p>

<!-- more -->


<p>Technology stack: Hibernate with JPA through Srping JpaTemplate helper.</p>

<p>So for example, suppose this is what my SQL template looks like</p>

<p><code>xml Hibernate Native SQL
&lt;sql-query name="findProductCoverageSummaryForSelectedUserInTeam" resultset-ref="productCoverageResult"&gt;
  select
  product_id_level_${level},
  product_name_level_${level}
  from product
&lt;/sql-query&gt;
</code></p>

<p>This is what the coressponding Java code looks like</p>

<p><code>java Using the Native SQL
Session session = (Session) getTransactionalEntityManager().getDelegate();
Query query = session.getNamedQuery("findProductCoverageSummaryForSelectedUserInTeam");
String sql = StringUtils.replace(query.getQueryString(), "${level}", Integer.toString(productLevel));
Query q = session.createSQLQuery(sql).setResultSetMapping("productCoverageResult");
List&lt;Object[]&gt; results = q.list();
</code></p>

<p>I use the native query just as a placeholder for my sql template. Then I use Apache StringUtils to replace those variables with the actual values.
I can't think of another better way to do it!</p>

<p>If you need a more complicated template, ones with logical condition then use Velocity as the templating engine. Velocity is what I am using but FreeMarker also is a good
candidate.</p>

<p><code>xml Native SQL with Velocity template
&lt;sql-query name="findProduct" resultset-ref="productCoverageResult"&gt;
  select
  product_id_level_$level,
  product_name_level_$level
  from
  product   #if ($orderBy)   order by   $orderBy $sortType   #end
&lt;/sql-query&gt;
</code></p>

<p>``` java Expand Native SQL Using Velocity Template
VelocityContext ctx = new VelocityContext();
ctx.put("level", level);
ctx.put("orderBy", level);
ctx.put("sortType", sortType);
Session session = (Session) getTransactionalEntityManager().getDelegate();</p>

<p>Query query = session.getNamedQuery("findProduct");
String sql = null;
try
{</p>

<pre><code>StringWriter writer = new StringWriter();
Velocity.init();
Velocity.evaluate(ctx, writer, "VEL", query.getQueryString());
sql = writer.getBuffer().toString();
</code></pre>

<p>}
catch (Exception e)
{</p>

<pre><code>throw new RuntimeException(e);
</code></pre>

<p>}</p>

<p>Query q = session.createSQLQuery(sql).setResultSetMapping("productCoverageResult");
List&lt;Object[]> results = q.list();
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RIA Portlet Made Possible With Flex Remoting]]></title>
    <link href="http://dmly.github.com/blog/2009/03/15/ria-portlet-made-possible-with-flex-remoting/"/>
    <updated>2009-03-15T13:50:00-07:00</updated>
    <id>http://dmly.github.com/blog/2009/03/15/ria-portlet-made-possible-with-flex-remoting</id>
    <content type="html"><![CDATA[<p>Even though portlet development standard has been in existence for a while its popularity and advanced functionality hasn't got a lot of changes comparing to traditional web application development. Up until now, the <em>only</em> way to develop a portlet application is to use the dated (but obviously dominant) JSP technology. I know there have have been several attempts to bring advanced view engines into JSR-168/JSP-286 such as JSF prolet bridge or even the Wicket Portlet bridge the lanscape overall is pretty naive and dificult to comprehense. I can refer to [this artical][1] when it comes to the reasons why portlet has not become dominant as if it should be by now.</p>

<!-- more -->


<p>In this story I will demonstrate my attempt to bring RIA development to a portlet environment. The technology stack I am using includes: Sun's OpenPortal portlet container, Flex RIA with blazeDS remoting. One of the most challenging obstacles developers face in developing RIA in a portlet environment is the asynchronous communication channel between the UI and the portlet itself. Portlet development somewhat is very similar to that of servlet development most of the time. But when it comes to technologies that tightly integrated into servlet, things start to break: try to put DWR/Wicket/Tapestry... in a portlet environment you would feel the pain!</p>

<p>My attempt to put the BlazeDS remoting into a portlet environment was a success. But it doesn't mean I didn't run into any bumps along the way.
Here how I did it: I have a regular portlet applicaption which provides nothing but a single JSP view. Then I create a Flex component which will be embedded in the JSP view. The Flex component has a single combo box widget which will make a remote RPC call via BlazeDS remoting to get the list data for itself. Now in the portlet application (which is nothing more than regular web app), I add blazeDS and all of the remote services support. To describe the setup is beyond the scope of this article but you can find many tutorials/articles online regarding the config. So far this is what we have:</p>

<ul>
<li> A portlet app with blazeDS remoting support</li>
<li> A Flex component which will get data from remoting services</li>
<li> A JSP view to embed the Flex component</li>
</ul>


<p>Now comes the critical section: making Flex component calling the remoting services from a portlet app.
Normally when you build a flex application with remoting services, you provide a fixed services-config.xml containing the channel/endpoint configuration.
This won't work in a portlet environment since you don't know the hostname, port numbers, context root, etc... before hand. All of those configurations depend on the portlet container implementation. To solve this issue I configure the Flex remoting services at runtime. In the JSP view embedding the Flex component I add a flashvars parameter to hold the BlazeDS remoting URL context. I advice that you use the standard portlet API to generate this URL instead of hardcoding it. For example in the JSP view, I get the remote service URL using this:</p>

<p>``` html JSP</p>

<p><span style="font-family: Courier New;"><object ...></span><span style="font-family: Courier New;"><br>
...<br>
<span style="color: rgb(255, 0, 0);"><param name="flashvars" value='serviceUrl=<%= renderResponse.encodeURL(renderRequest.getContextPath()<br>
    + "/messagebroker/amf") %>' /></span><br>
<embed src='<%= renderResponse.encodeURL(renderRequest.getContextPath()<br>
      + "/portlet.swf") %>'<br>
    ...<br>
    <span style="color: rgb(255, 0, 0);">flashVars='serviceUrl=<%= renderResponse.encodeURL(renderRequest.getContextPath()<br>
      + "/messagebroker/amf") %>'</span><br>
            ><br>
        </embed><br>
</object></span></p>
```

Now in the flex component, you need to create the remote channel/endpoint programmatically:

``` actionscript Channel
var serviceUrl:String = Application.application.parameters.serviceUrl;
var _channelSet:ChannelSet = new ChannelSet();
var _amfChannel:AMFChannel = new AMFChannel("my-amf", serviceUrl);
_channelSet.addChannel(_amfChannel);
                
remoteObj = new RemoteObject("remoteService");
remoteObj.channelSet = _channelSet;
remoteObj.addEventListener(ResultEvent.RESULT, onready);
remoteObj.addEventListener(FaultEvent.FAULT, onfault);
```

One of the coolest thing about putting RIA in a portlet via Flex/BlazeDS remoting services is that you get asynchronous services for free! It means no whole page refresh, ever, for your portal.
Another nice thing is that since we use the standard portlet API to expose the BlazeDS services, all communication between your Flex component and the back-end services will be proxied through the portlet container resource servlet. What it means is that you can literally WSRP-enable your Flex portlet application if you want to and things would continue to work: no firewall setting to mess with, no blazeDS services to reconfigure.

<img src="/images/flex-portlet.jpeg" title="[Flex Portlet in OpenPortal]" >

Source code and binary files:
[flex-portlet.war][2] (to be deployed in a portlet container)
[flex-portlet.zip][3] (Source)

[1]:http://today.java.net/pub/a/today/2009/01/20/jsr-286-portlet-irrelevance.html
[2]:http://velcrotag.googlecode.com/files/flex-portlet.war
[3]:http://velcrotag.googlecode.com/files/flex-portlet.zip

]]></content>
  </entry>
  
</feed>
